package main

type applicationObj struct {
	ID    snowflake `json:"id"`
	Flags int       `json:"flags"`
}

type snowflake string

// https://discord.com/developers/docs/resources/channel#message-object
type messageObj struct {
	ID        snowflake  `json:"id"`         // id of the message
	ChannelID snowflake  `json:"channel_id"` // id of the channel the message was sent in
	GuildID   *snowflake `json:"guild_id"`   // id of the guild the message was sent in
	Author    *userObj   `json:"author"`     // the author of this message (not guaranteed to be a valid user, see below)
	// Member	partial guild member object	`json:"member?**"`	// member properties for this message's author
	Content string `json:"content"` // contents of the message
	// Timestamp	ISO8601 timestamp	`json:"timestamp"`	// when this message was sent
	// EditedTimestamp	?ISO8601 timestamp	`json:"edited_timestamp"`	// when this message was edited (or null if never)
	TTS             bool      `json:"tts"`              // whether this was a TTS message
	MentionEveryone bool      `json:"mention_everyone"` // whether this message mentions everyone
	Mentions        []userObj `json:"mentions"`         // users specifically mentioned in the message
	// MentionRoles	array of role object ids	`json:"mention_roles"`	// roles specifically mentioned in this message
	// MentionChannels	array of channel mention objects	`json:"mention_channels?****"`	// channels specifically mentioned in this message
	// Attachments	array of attachment objects	`json:"attachments"`	// any attached files
	// Embeds	array of embed objects	`json:"embeds"`	// any embedded content
	// Reactions	array of reaction objects	`json:"reactions?"`	// reactions to the message
	Nonce     string     `json:"nonce"`      // used for validating a message was sent
	Pinned    bool       `json:"pinned"`     // whether this message is pinned
	WebhookID *snowflake `json:"webhook_id"` // if the message is generated by a webhook, this is the webhook's id
	Type      int        `json:"type"`       // type of message
	// Activity	*message activity object	`json:"activity"`	// sent with Rich Presence-related chat embeds
	// Application	*partial application object	`json:"application"`	// sent with Rich Presence-related chat embeds
	ApplicationID *snowflake `json:"application_id"` // if the message is an Interaction or application-owned webhook, this is the id of the application
	// MessageReference	*message reference object	`json:"message_reference"`	// data showing the source of a crosspost, channel follow add, pin, or reply message
	Flags int `json:"flags"` // message flags combined as a bitfield
	// ReferencedMessage	message object	`json:"referenced_message?*****"`	// the message associated with the message_reference
	// Interaction	*message interaction object	`json:"interaction"`	// sent if the message is a response to an Interaction
	// Thread	*channel object	`json:"thread"`	// the thread that was started from this message, includes thread member object
	// Components	*Array of message components	`json:"components"`	// sent if the message contains components like buttons, action rows, or other interactive components
	// StickerItems	*array of message sticker item objects	`json:"sticker_items"`	// sent if the message contains stickers
	// Stickers?	array of sticker objects	`json:"stickers?"`	// Deprecated the stickers sent with the message
}

type userObj struct {
	ID            snowflake `json:"id"`            // the user's id
	Username      string    `json:"username"`      // the user's username, not unique across the platform
	Discriminator string    `json:"discriminator"` // the user's 4-digit discord-tag
	Avatar        string    `json:"avatar"`        // the user's avatar hash
	Bot           *bool     `json:"bot"`           // whether the user belongs to an OAuth2 application
	System        *bool     `json:"system"`        // whether the user is an Official Discord System user (part of the urgent message system)
	MFAEnabled    *bool     `json:"mfa_enabled"`   // whether the user has two factor enabled on their account
	Banner        string    `json:"banner"`        // the user's banner hash
	AccentColor   *int      `json:"accent_color"`  // the user's banner color encoded as an integer representation of hexadecimal color code
	Locale        string    `json:"locale"`        // the user's chosen language option
	Verified      *bool     `json:"verified"`      // whether the email on this account has been verified
	Email         string    `json:"email"`         // the user's email
	Flags         *int      `json:"flags"`         // the flags on a user's account
	PremiumType   *int      `json:"premium_type"`  // the type of Nitro subscription on a user's account
	PublicFlags   *int      `json:"public_flags"`  // the public flags on a user's account
}

// https://discord.com/developers/docs/resources/channel#channel-object
type channelObj struct {
	ID   snowflake `json:"id"`   // the id of this channel
	Name string    `json:"name"` // the name of the channel (1-100 characters)
}
